#include <stdio.h>

int max(int a, int b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

int knapsack(int W, int weights[], int values[], int n) {
    int dp[n + 1][W + 1];  // DP table for storing maximum values

    // Initialize DP table
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0) {
                dp[i][w] = 0;  // Base case: no items or zero capacity
            } else if (weights[i - 1] <= w) {
                // Max value by including or excluding the current item
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);
            } else {
                dp[i][w] = dp[i - 1][w];  // Exclude current item
            }
        }
    }

    return dp[n][W];  // Maximum value in the knapsack
}

int main() {
    int values[] = {60, 100, 120};  // Values of items
    int weights[] = {10, 20, 30};   // Weights of items
    int W = 50;  // Maximum weight capacity of the knapsack
    int n = sizeof(values) / sizeof(values[0]);

    int maxValue = knapsack(W, weights, values, n);
    printf("Maximum value in the knapsack = %d\n", maxValue);

    return 0;
}
